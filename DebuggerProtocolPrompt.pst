<?xml version="1.0"?><st-source><!-- Name: DebuggerProtocolPromptNotice: The MIT LicenseCopyright (c) 2013, Russel Hill, David Alford, and Randy CoulmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.Comment: # DebuggerProtocolPromptPrompt for a method protocol when defining a new method in thedebugger.DebuggerProtocolPrompt is licensed under the MIT license.  See theCopyright tab in the RB, the 'notice' property of this package, or theLicense.txt file on GitHub.DebuggerProtocolPrompt's primary home is the [Cincom Public StoreRepository](http://www.cincomsmalltalk.com/CincomSmalltalkWiki/Public+Store+Repository).Check there for the latest version.  It is also on[GitHub](https://github.com/randycoulman/DebuggerProtocolPrompt).DebuggerProtocolPrompt was developed in VW 7.9.1, but is compatiblewith VW 7.7 and later.  It may also work with earlier versions, butthat has not been tested.  If you find any incompatibilities with VW7.7 or later, let me know (see below for contact information) or filean issue on GitHub.# IntroductionWhen a MessageNotUnderstood error is raised, the Visualworks debuggerprovides the option of defining the missing method.  Normally, thenewly-defined method is placed into the default "As yet unclassified"method protocol.DebuggerProtocolPrompt overrides the default behavior, and insteadprompts for a protocol for the new method.If all of the existing implementers of the new method are in the sameprotocol, DebuggerProtocolPrompt automatically places the new methodin that protocol without prompting.# UsageSimply load the package and it will be active.NOTE: It overrides one method in DebuggerService in order to do itsjob.# AcknowledgementsDebuggerProtocolPrompt was originally written by Russel Hill and DavidAlford.# ContributingI'm happy to receive bug fixes and improvements to this package.  Ifyou'd like to contribute, please publish your changes as a "branch"(non-integer) version in the Public Store Repository and contact me asoutlined below to let me know.  I will merge your changes back intothe "trunk" as soon as I can review them.# Contact InformationIf you have any questions about DebuggerProtocolPrompt and how to useit, feel free to contact me.* Web site: http://randycoulman.com* Blog: Courageous Software (http://randycoulman.com/blog)* E-mail: randy _at_ randycoulman _dot_ com* Twitter: @randycoulman* GitHub: randycoulmanDbIdentifier: psql_public_cst_2007DbTrace: 87590DbUsername: randyDbVersion: 1DevelopmentPrerequisites: #(#(#any 'Base VisualWorks' '') #(#any 'Debugger-Support' ''))PackageName: DebuggerProtocolPromptParcel: #('DebuggerProtocolPrompt')PrerequisiteDescriptions: #(#(#name 'Base VisualWorks' #componentType #bundle) #(#name 'Debugger-Support' #componentType #package))PrerequisiteParcels: #(#('Base VisualWorks' '') #('Debugger-Support' ''))PrintStringCache: (1,randy)Version: 1Date: 7:02:12 AM May 1, 2013 --><time-stamp>From VisualWorksÂ® Personal Use Edition, 7.9.1 of October 18, 2012 on May 1, 2013 at 7:02:12 AM</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><methods><class-id>CraftedSmalltalk.DebuggerService</class-id> <category>spelling correction</category><body package="DebuggerProtocolPrompt">defineMethodForDoesNotUnderstand	"Override to prompt for a protocol when defining a new method in the Debugger."	| message newContext protocol |	message := self context localAt: 1.	protocol := self selectProtocolFor: message.	protocol isEmpty ifTrue: [^self].	(self context homeReceiverClass)		compile: message methodStubSource;		classifySymbol: message selector under: protocol.	newContext := MethodContext				sender: self context				receiver: self context receiver				method: (self context homeReceiverClass compiledMethodAt: message selector)				arguments: message arguments.	newContext stepUntilVisibleEffect.	processHandle topContext: newContext.	self selectContext: newContext.	self updateContextList</body><body package="DebuggerProtocolPrompt">existingProtocolsFor: aMessageSelector	"Answer a dictionary mapping protocols to collections of implementors"	| existingImplementors |	existingImplementors := (MethodCollector new				implementorsOf: aMessageSelector) select.	^(existingImplementors groupedBy: #protocol)		removeKey: ClassOrganizer defaultProtocol ifAbsent: [];		yourself</body><body package="DebuggerProtocolPrompt">mostPopularProtocol: aDictionary	aDictionary isEmpty ifTrue: [^String new].	^(aDictionary associations sorted: [:a :b | a value size &gt;= b value size])		first key</body><body package="DebuggerProtocolPrompt">promptForProtocolInitial: aString	^(IncrementalSearchDialog		requestProtocol: 'Specify a protocol for the new method:'		initialAnswer: aString		inClass: self context homeReceiverClass		ifClassNameProvided: [:ignored | ]) ifNil: [String new]</body><body package="DebuggerProtocolPrompt">selectProtocolFor: message	| existingProtocols |	existingProtocols := self existingProtocolsFor: message selector.	existingProtocols size = 1 ifTrue: [^existingProtocols keys any].	^self		promptForProtocolInitial: (self mostPopularProtocol: existingProtocols)</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>DebuggerService</name><environment>CraftedSmalltalk</environment><super>UI.Model</super><private>false</private><indexed-type>none</indexed-type><inst-vars>processHandle oldCursor receiverInspector contextInspector stackInspector sourceMap currentContext pendingEvents continueInDebuggerCtx finishBlock selector tags stepProbes label serviceProcess selectionRange contextStackPolicy dontUpdateInspectors doSend doSendLoop doStepIntoBlock debugOperationIsActive doItProcess </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Programming</category><attributes><package>Debugger-Support</package></attributes></class></st-source>